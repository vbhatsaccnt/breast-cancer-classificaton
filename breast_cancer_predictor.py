# -*- coding: utf-8 -*-
"""breast_cancer_predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XX1TignnhBAh6oDBJ5KL_dwbFXAOk1gO

#CLASSIFICATION OF BREAST CANCER#
"""

# Commented out IPython magic to ensure Python compatibility.
#IMPORTING THE REQUIRED PANDAS LIBRARIES AND VISUALIZATION LIBRARIES

import pandas as pd
import numpy as np

# %matplotlib inline
import matplotlib.pyplot as plt
import seaborn as sns

#IMPOTING THE DATASET FROM THE SKLEARN LIBRARY
from sklearn.datasets import load_breast_cancer

cancer = load_breast_cancer()

cancer.keys()

print(cancer['target'])

print(cancer['target_names'])

print(cancer['feature_names'])

print(cancer['DESCR'])

cancer['data'].shape

df_cancer = pd.DataFrame(np.c_[cancer['data'], cancer['target']], columns = np.append(cancer['feature_names'], ['target']))

df_cancer.head(5)

df_cancer.tail(5)

#EXPLORATORY ANALYSIS USING DATA VISUALIZATION

sns.pairplot(df_cancer, hue = 'target', vars = ['mean radius', 'mean texture', 'mean area', 'mean perimeter', 'mean smoothness'])

sns.countplot(df_cancer['target'],label = "count")

sns.scatterplot(x = 'mean area', y = 'mean smoothness', hue = 'target', data = df_cancer)

sns.lmplot('mean area', 'mean smoothness', hue ='target', data = df_cancer, fit_reg=False)

#CHECKING THE CORRELATION BETWEEN VARIABLES
df_cancer.corr()

df_cancer[['mean radius','mean perimeter','mean area']].corr()

plt.figure(figsize =(20,10))
sns.heatmap(df_cancer.corr(),annot =True)

#TRAINING THE MODEL

#LETS DROP THE 'TARGET' COLUMN AND CREATE FEATURE MATRIX

X = df_cancer.drop(['target'],axis =1)
y =df_cancer['target']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=5)

X_train.shape

X_test.shape

y_train.shape

y_test.shape

from sklearn.svm import SVC 
from sklearn.metrics import classification_report, confusion_matrix

svc_model = SVC()

svc_model.fit(X_train,y_train)

y_predict = svc_model.predict(X_test)

y_predict.shape

cm =confusion_matrix(y_test,y_predict)

print(cm)

sns.heatmap(cm,annot =True)

print(classification_report(y_test, y_predict))

#IMPROVING THE MODEL ----1
#Data Normalization:
#Feature scaling (Uni-based normalization) brings values into range [0,1]
#X' = (X - Xmin)/(Xmax - Xmin)
''''''

min_train = X_train.min()
range_train = (X_train - min_train).max()
X_train_scaled = (X_train - min_train)/range_train

sns.scatterplot(x = X_train['mean area'], y = X_train['mean smoothness'], hue = y_train)

sns.scatterplot(x = X_train_scaled['mean area'], y = X_train_scaled['mean smoothness'], hue = y_train)

min_test = X_test.min()

range_test = (X_test - min_test).max()

X_test_scaled = (X_test - min_test)/range_test

svc_model_1 = SVC()
svc_model_1.fit(X_train_scaled, y_train)

y_predict = svc_model_1.predict(X_test_scaled)
cm = confusion_matrix(y_test, y_predict)

print(cm)

sns.heatmap(cm,annot =True,fmt ='d')

print(classification_report(y_test,y_predict))

#IMPROVING THE MODEL - PART 2
#C parameter: Controls trade off between classifying training points
#correctly and having a smooth decision boundary:
#    -Small C (loose) makes cost (penalty) of misclassification low (soft margin)
#    -Large C (strict) makes cost of misclassification high (hard margin), forcing
#     the model to explain input data stricter and potentially over fit
     
#Gamma parameter: Controls how far the influence of a single training set reachs
#    -Large gamma: close reach (closer data points have high weight)
#    -Small gamma: far reach (more generalization solution)

param_grid = {'C': [0.1, 1, 10, 100], 'gamma': [1, 0.1, 0.01, 0.001], 'kernel': ['rbf']}

from sklearn.model_selection import GridSearchCV

grid = GridSearchCV(SVC(),param_grid,refit=True,verbose=4)
grid.fit(X_train_scaled,y_train)

grid.best_params_
grid.best_estimator_

grid_predictions = grid.predict(X_test_scaled)
cm = confusion_matrix(y_test, grid_predictions)

print(cm)

sns.heatmap(cm, annot=True)

print(classification_report(y_test,grid_predictions))

"""# Creating a pickle file for the classifier"""

import pickle
filename = 'breast-cancer-predictor.pkl'
pickle.dump(grid, open(filename, 'wb'))





