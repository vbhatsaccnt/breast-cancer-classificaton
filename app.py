# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gKDW70pm7J49dXk01kd55u_C_23UdQ1c
"""

# Importing essential libraries
from flask import Flask, render_template, request
import pickle
import numpy as np

# Load the Support Vector Classifier Model
filename = 'breast-cancer-predictor.pkl'
classifier = pickle.load(open(filename, 'rb'))

app = Flask(__name__)

@app.route('/')
def home():
	return render_template('index.html')

@app.route('/predict', methods=['GET','POST'])
def predict():
    if request.method == 'POST':
        mean_radius = float(request.form['mean radius'])
        mean_perimeter = float(request.form['mean perimeter'])
        mean_area = float(request.form['mean area'])
        mean_compactness = float(request.form['mean compactness'])
        mean_concavity = float(request.form['mean concavity'])
        mean_concave_point = float(request.form['mean concave points'])
        mean_symmetry = float(request.form['mean symmetry'])
        mean_fractal_dimension= float(request.form['mean fractal dimension'])
        radius_error = float(request.form['radius error'])
        texture_error = float(request.form['texture error'])
        perimeter_error = float(request.form['perimeter error'])
        area_error = float(request.form['area error'])
        smoothness_error = float(request.form['smoothness error'])
        compactness_error = float(request.form['compactness error'])
        worst_compactness = float(request.form['worst compactness'])
        worst_concavity = float(request.form['worst concavity'])
        worst_concave_points = float(request.form['worst concave points'])
        worst_symmetry = float(request.form['worst symmetry'])
        worst_fractal_dimension = float(request.form['worst fractal dimension'])

        
        data = np.array([[mean_radius,mean_perimeter,mean_area,mean_compactness,mean_concavity,mean_concave_point,mean_symmetry,mean_fractal_dimension,radius_error,
                          texture_error,perimeter_error,area_error,smoothness_error,compactness_error,worst_compactness,worst_concavity,worst_concave_points,worst_symmetry,worst_fractal_dimension]])
        my_prediction = classifier.predict(data)
        
        return render_template('result.html', prediction=my_prediction)

if __name__ == '__main__':
	app.run(debug=True)
